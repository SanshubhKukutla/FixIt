import { useRef, useEffect, useMemo, useState } from 'react';
import { last } from 'ramda';
import { shouldReinitialize, createConversation } from '@nlxai/chat-core';

/**
 * A [custom hook](https://react.dev/learn/reusing-logic-with-custom-hooks)
 * used to create fully custom chat widgets for web and mobile.
 * @param config - The configuration object for the chatbot.
 * @returns the hook object containing the chat state and methods.
 */
const useChat = (config) => {
    const prevConversationHandler = useRef(null);
    const prevConfig = useRef(null);
    useEffect(() => {
        prevConfig.current = config;
    }, [config]);
    const conversationHandler = useMemo(() => {
        // Prevent re-initialization if backend-related props have not changed
        if (prevConfig.current != null &&
            prevConversationHandler.current != null &&
            !shouldReinitialize(prevConfig.current, config)) {
            return prevConversationHandler.current;
        }
        const newHandler = createConversation(config);
        prevConversationHandler.current = newHandler;
        return newHandler;
    }, [config]);
    const [responses, setResponses] = useState(config.responses ?? []);
    const [inputValue, setInputValue] = useState("");
    useEffect(() => {
        conversationHandler.subscribe(setResponses);
        return () => {
            conversationHandler.destroy();
        };
    }, [conversationHandler]);
    const lastMessage = last(responses);
    const isWaiting = lastMessage?.type === "user";
    return {
        conversationHandler,
        inputValue,
        responses,
        waiting: isWaiting,
        setInputValue,
    };
};

export { useChat as default, useChat };
