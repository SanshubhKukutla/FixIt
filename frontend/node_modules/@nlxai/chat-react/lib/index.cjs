'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var ramda = require('ramda');
var chatCore = require('@nlxai/chat-core');

/**
 * A [custom hook](https://react.dev/learn/reusing-logic-with-custom-hooks)
 * used to create fully custom chat widgets for web and mobile.
 * @param config - The configuration object for the chatbot.
 * @returns the hook object containing the chat state and methods.
 */
const useChat = (config) => {
    const prevConversationHandler = react.useRef(null);
    const prevConfig = react.useRef(null);
    react.useEffect(() => {
        prevConfig.current = config;
    }, [config]);
    const conversationHandler = react.useMemo(() => {
        // Prevent re-initialization if backend-related props have not changed
        if (prevConfig.current != null &&
            prevConversationHandler.current != null &&
            !chatCore.shouldReinitialize(prevConfig.current, config)) {
            return prevConversationHandler.current;
        }
        const newHandler = chatCore.createConversation(config);
        prevConversationHandler.current = newHandler;
        return newHandler;
    }, [config]);
    const [responses, setResponses] = react.useState(config.responses ?? []);
    const [inputValue, setInputValue] = react.useState("");
    react.useEffect(() => {
        conversationHandler.subscribe(setResponses);
        return () => {
            conversationHandler.destroy();
        };
    }, [conversationHandler]);
    const lastMessage = ramda.last(responses);
    const isWaiting = lastMessage?.type === "user";
    return {
        conversationHandler,
        inputValue,
        responses,
        waiting: isWaiting,
        setInputValue,
    };
};

exports.default = useChat;
exports.useChat = useChat;
