{"ast":null,"code":"import { useRef, useEffect, useMemo, useState } from 'react';\nimport { last } from 'ramda';\nimport { shouldReinitialize, createConversation } from '@nlxai/chat-core';\n\n/**\n * A [custom hook](https://react.dev/learn/reusing-logic-with-custom-hooks)\n * used to create fully custom chat widgets for web and mobile.\n * @param config - The configuration object for the chatbot.\n * @returns the hook object containing the chat state and methods.\n */\nconst useChat = config => {\n  const prevConversationHandler = useRef(null);\n  const prevConfig = useRef(null);\n  useEffect(() => {\n    prevConfig.current = config;\n  }, [config]);\n  const conversationHandler = useMemo(() => {\n    // Prevent re-initialization if backend-related props have not changed\n    if (prevConfig.current != null && prevConversationHandler.current != null && !shouldReinitialize(prevConfig.current, config)) {\n      return prevConversationHandler.current;\n    }\n    const newHandler = createConversation(config);\n    prevConversationHandler.current = newHandler;\n    return newHandler;\n  }, [config]);\n  const [responses, setResponses] = useState(config.responses ?? []);\n  const [inputValue, setInputValue] = useState(\"\");\n  useEffect(() => {\n    conversationHandler.subscribe(setResponses);\n    return () => {\n      conversationHandler.destroy();\n    };\n  }, [conversationHandler]);\n  const lastMessage = last(responses);\n  const isWaiting = lastMessage?.type === \"user\";\n  return {\n    conversationHandler,\n    inputValue,\n    responses,\n    waiting: isWaiting,\n    setInputValue\n  };\n};\nexport { useChat as default, useChat };","map":{"version":3,"names":["useRef","useEffect","useMemo","useState","last","shouldReinitialize","createConversation","useChat","config","prevConversationHandler","prevConfig","current","conversationHandler","newHandler","responses","setResponses","inputValue","setInputValue","subscribe","destroy","lastMessage","isWaiting","type","waiting","default"],"sources":["/Users/ananyapattamatta/Desktop/FixIt/FixIt/frontend/node_modules/@nlxai/chat-react/lib/index.esm.js"],"sourcesContent":["import { useRef, useEffect, useMemo, useState } from 'react';\nimport { last } from 'ramda';\nimport { shouldReinitialize, createConversation } from '@nlxai/chat-core';\n\n/**\n * A [custom hook](https://react.dev/learn/reusing-logic-with-custom-hooks)\n * used to create fully custom chat widgets for web and mobile.\n * @param config - The configuration object for the chatbot.\n * @returns the hook object containing the chat state and methods.\n */\nconst useChat = (config) => {\n    const prevConversationHandler = useRef(null);\n    const prevConfig = useRef(null);\n    useEffect(() => {\n        prevConfig.current = config;\n    }, [config]);\n    const conversationHandler = useMemo(() => {\n        // Prevent re-initialization if backend-related props have not changed\n        if (prevConfig.current != null &&\n            prevConversationHandler.current != null &&\n            !shouldReinitialize(prevConfig.current, config)) {\n            return prevConversationHandler.current;\n        }\n        const newHandler = createConversation(config);\n        prevConversationHandler.current = newHandler;\n        return newHandler;\n    }, [config]);\n    const [responses, setResponses] = useState(config.responses ?? []);\n    const [inputValue, setInputValue] = useState(\"\");\n    useEffect(() => {\n        conversationHandler.subscribe(setResponses);\n        return () => {\n            conversationHandler.destroy();\n        };\n    }, [conversationHandler]);\n    const lastMessage = last(responses);\n    const isWaiting = lastMessage?.type === \"user\";\n    return {\n        conversationHandler,\n        inputValue,\n        responses,\n        waiting: isWaiting,\n        setInputValue,\n    };\n};\n\nexport { useChat as default, useChat };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AAC5D,SAASC,IAAI,QAAQ,OAAO;AAC5B,SAASC,kBAAkB,EAAEC,kBAAkB,QAAQ,kBAAkB;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAIC,MAAM,IAAK;EACxB,MAAMC,uBAAuB,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC5C,MAAMU,UAAU,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC/BC,SAAS,CAAC,MAAM;IACZS,UAAU,CAACC,OAAO,GAAGH,MAAM;EAC/B,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACZ,MAAMI,mBAAmB,GAAGV,OAAO,CAAC,MAAM;IACtC;IACA,IAAIQ,UAAU,CAACC,OAAO,IAAI,IAAI,IAC1BF,uBAAuB,CAACE,OAAO,IAAI,IAAI,IACvC,CAACN,kBAAkB,CAACK,UAAU,CAACC,OAAO,EAAEH,MAAM,CAAC,EAAE;MACjD,OAAOC,uBAAuB,CAACE,OAAO;IAC1C;IACA,MAAME,UAAU,GAAGP,kBAAkB,CAACE,MAAM,CAAC;IAC7CC,uBAAuB,CAACE,OAAO,GAAGE,UAAU;IAC5C,OAAOA,UAAU;EACrB,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EACZ,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAACK,MAAM,CAACM,SAAS,IAAI,EAAE,CAAC;EAClE,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChDF,SAAS,CAAC,MAAM;IACZW,mBAAmB,CAACM,SAAS,CAACH,YAAY,CAAC;IAC3C,OAAO,MAAM;MACTH,mBAAmB,CAACO,OAAO,CAAC,CAAC;IACjC,CAAC;EACL,CAAC,EAAE,CAACP,mBAAmB,CAAC,CAAC;EACzB,MAAMQ,WAAW,GAAGhB,IAAI,CAACU,SAAS,CAAC;EACnC,MAAMO,SAAS,GAAGD,WAAW,EAAEE,IAAI,KAAK,MAAM;EAC9C,OAAO;IACHV,mBAAmB;IACnBI,UAAU;IACVF,SAAS;IACTS,OAAO,EAAEF,SAAS;IAClBJ;EACJ,CAAC;AACL,CAAC;AAED,SAASV,OAAO,IAAIiB,OAAO,EAAEjB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}